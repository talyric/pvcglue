# This is a generated file.  Do not modify...or else!  :)

set :tmp_dir, '/tmp/<%= Pvcglue.cloud.app_and_stage_name %>'
set :stage, :<%= Pvcglue.cloud.stage_name %>
set :rails_env, :<%= Pvcglue.cloud.stage_name %> # workaround for RAILS_ENV= being blank in delayed job tasks
set :deploy_to, '<%= Pvcglue.cloud.deploy_to_app_dir %>'
set :linked_files, ['.env.<%= Pvcglue.cloud.stage_name %>']
set :rvm_ruby_version, '<%= Pvcglue.configuration.ruby_version %>'
<% if Pvcglue.cloud.delayed_job_args %>
set :delayed_job_args, "<%= Pvcglue.cloud.delayed_job_args %>"
<% end %>
set :ssh_options, {port: <%= Pvcglue.cloud.port_in_context(:deploy) %>}

<% Pvcglue.cloud.minions_filtered('web').each do |minion_name, minion| %>
server '<%= minion.public_ip %>', roles: %w{web app}, user: '<%= minion.remote_user_name %>' # server:  <%= minion.machine_name %>
<% end %>
<% Pvcglue.cloud.minions_filtered('worker').each do |minion_name, minion| %>
server '<%= minion.public_ip %>', roles: %w{web app}, user: '<%= minion.remote_user_name %>' # server:  <%= minion.machine_name %>
<% end %>
<% if Pvcglue.cloud.db_rebuild %>

namespace :deploy do
  Rake::Task["deploy:migrate"].clear_actions # Don't run migrations...just do the reload.
  desc 'Overrides db:migrate to just run db:reload'
  task :migrate => [:set_rails_env] do
    on primary fetch(:migration_role) do
      within release_path do
        with rails_env: fetch(:rails_env) do
          execute :rake, "db:reload"
        end
      end
    end
  end
end
<% end %>
